安排：
    1.网络编程（4天）
    2.进程线程（5天）
    3.MongoDB数据库（4天）
    4.正则表达式（1.5天）
    5.项目（2.5天）
    6.git的使用（1天）

网络编程

网络功能：数据传输

ISO (国际标准化组织)

OSI七层模型---》 网络通信工作流程的标准化

应用层：提供用户服务，具体功能由特定的程序而定（网络服务与最终用户的一个接口）
表示层：数据的压缩优化，加密（数据的表示、安全、压缩。（在五层模型里面已经合并到了应用层））
会话层：建立应用级的连接，选择传输服务（建立、管理、终止会话。（在五层模型里面已经合并到了应用层））
传输层：提供不同的传输服务。流量控制（定义传输数据的协议端口号，以及流控和差错校验。）
网络层：路由选择，网络互连（进行逻辑地址寻址，实现不同网络之间的路径选择。）
链路层：进行数据转换，具体消息的发送，链路连接（建立逻辑连接、进行硬件地址寻址、差错校验等功能。（由底层网络定义协议）将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。）
物理层：物理硬件，接口设定，网卡路由交换机等（建立、维护、断开物理连接。（由底层网络定义协议））

cookie
高内聚：模块功能尽可能单一，不要掺杂
低耦合：模块之间尽可能减少关联和影响

OSI七层模块优点：1.将工作流程标准化
              2.降低了模块间的耦合度，使每一部分可以单独开发，单独工作

四层模型
应用层：应用层，表示层，会话层
传输层
网络层
物理链路层

五层模型（TCP/IP模型）
应用层：应用层，表示层，会话层
传输层
网络层
链路层
物理层

数据传输流程
1.发送端由应用层到网络层逐层添加信息头（首部），最终在网络层发送
2.中间经过节点（交换机，路由器等）转发，发送到接收端
3.在接收端根据发送端的每个信息头进行解析，最终消息到应用层展示给用户

网络协议：在网络通信中双方都遵循的规定。包括建立什么样的网络结构，消息结构，标识代表什么等。

应用层：TFTP HTTP DNS SMTP
传输层：TCP UDP
网络层：IP
网络层：IEEE

网络相关概念
网络主机： 在网络中标识一台计算机  HOST
本地使用： ‘localhost’ ‘127.0.0.1’
网络使用： ‘0.0.0.0’   ‘192.168.48.129’
获取计算机名
import socket
socket.gethostname()
socket.gethostbyname('localname')

IP地址
网络上确定一台主机网络位置的地址

IPv4：点分十进制  192.168.1.2  0--255

IPv6:128位

ping IP ： 测试和某台网络主机是否联通

特殊IP地址
127.0.0.1   本地测试IP
0.0.0.0     使用本机可用IP
192.168.1.0 表示网段IP
192.168.1.1 网关IP
192.168.1.255 广播地址

提供地址获取主机网络信息
socket.gethostbyaddr('www.baidu.com')
('127.0.0.1',[],['119.75.216.20'])

socket.inet_aton('192.168.1.2')
b'\xc0\xa8\x01\x02'

socket.inet_ntoa( b'\xc0\xa8\x01\x02')
'192.168.1.2'

域名：网络服务器地址的名称
1.方便记忆
2.名称表达一定的含义

网络端口号
端口是网络地址的一部分，用于区分一个网络主机上的网络应用
* 在一个操作系统中不同的网络应用监听不同的端口号

取值范围：1--65535
    1--255 一些总所周知的通用端口
    256--1023 系统应用端口
    1024--65535  自用端口
    建议使用 >10000
获取一个应用的端口信息
socket.getservbyname('mysql')
3306

网络字节序： 数据在网络中的传输格式

传输层服务

面向连接的传输服务 ---》 tcp协议

传输特征：

可靠的数据传输
可靠性 ： 数据在传输中，无失序 无差错  无丢失 无重复

在数据传输前和传输结束后需要建立连接和断开连接

三次握手 ： 在面向连接的传输服务中建立连接的过程

1. 客户端向服务器发送连接请求
2. 服务器接受到请求进行确认，返回确认报文
3. 客户端收到服务器回复最终确认连接

四次挥手 ： 在面向连接的传输服务站断开连接的过程

1. 主动方发送报文，告知被动方要断开连接
2. 被动方回复报文，表示已经接收到请求，准备断开
3. 被动方再次发送报文，表示准备处理就绪，可以断开
4. 主动发发送确认报文，断开连接

应用情况 ： 适用于传输较大的内容或文件，网络良好，需             要保证传输可靠性的情况
e.g.  聊天信息   文件的上传下载， 邮件处理
      网页获取

面向无连接的传输服务 ---》 udp协议

传输特点：
不保证传输的可靠性
没有连接和断开的过程
数据的首发比较自由

适用情况 ： 网络情况可能产生丢包，对传输可靠性要求低

e.g.  ： 网络视频，  群聊，广播等

要求：
1. 理解三次握手和四次挥手，能够描述过程
2. 知道tcp传输和udp传输的区别


socket 套接字编程

目的 ： 通过编程语言提供的套接字编程接口，可以更简单的完成基于tcp和udp的编程

套接字 ： 完成上述目标的一种编程手段

套接字类别

流式套接字（SOCK_STREAM）：传输层基于tcp的协议通信
       面向连接可靠的传输   tcp的传输   流式套接字

数据报套接字（SOCK_DGRAM）： 传输层基于udp协议传输
   面向无连接不可靠的传输   udp的传输   数据报套接字

底层套接字 （SOCK_RAM）: 访问底层协议套接字


TCP的服务端

import socket

1. 创建套接字

sockfd = socket.socket(sock_family = AF_INET,
              sock_type = SOCK_STREAM,
	      proto = 0)
功能 ： 创建套接字
参数 ： sock_family  地址族类型 AF_INET ipv4网络通信
        sock_type   套接字类型  SOCK_STREAM 流式
	                        SOCK_DGRAM  数据报
	proto  通常为0  选定子协议类型
返回值 ： 返回套接字对象

2. 绑定地址

sockfd.bind(addr)
功能 ： 绑定地址
参数 ： addr  ---》 元组 （ip,port） ('0.0.0.0',1234)


3. 设置监听套接字

sockfd.listen(n)
功能： 将套接字设置为监听套接字，创建监听队列
参数： 监听队列大小

* 一个监听套接字可以连接多个客户端

4. 等待出来处理客户端连接请求

connfd,addr = sockfd.accept()
功能 ： 阻塞等待处理客户端连接
返回值 ： connfd  新的套接字，用于和客户端通信
          addr  连接的客户端的地址 （ip,port）

* 阻塞函数 ： 当程序运行到阻塞函数位置，如果某种条件没有达成则暂停程序运行，知道条件达成结束阻塞

5. 消息的收发

data = connfd.recv(buffersize)
功能 ： 接收对应客户端消息
参数 ： 一次接受消息的大小  字节
返回值 ： 返回接受到的内容

* 如果没有消息则会阻塞

n = connfd.send(data)
功能 ： 发送消息给对应客户端
参数 ： 要发送的内容 ，必须是（bytes格式）
返回值 ： 返回实际发送的字节数

6. 关闭套接字

sockfd.close()

* telnet  ip   port

客户端

1. 创建套接字 （和服务端套接字类型相同）
2. 发起连接

connect（addr）
功能 ： 向服务端发起连接
参数 ： 服务端地址   元组

3. 消息收发
4. 关闭套接字

